<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.3//EN" "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">
	<property name="severity" value="warning"/>

        <!-- 以下节点是配置检查代码位置规则-->
	<module name="TreeWalker">

		<!-- 注释 -->
                <!-- 类和接口注释 -->
                <module name="JavadocType">
			<property name="scope" value="private"/>
                        <property name="tokens" value="CLASS_DEF,INTERFACE_DEF"/>
                </module>

                <!-- 方法注释 -->
                <module name="JavadocMethod">
			<property name="scope" value="private"/>	
		</module>

                <!-- 变量注释 -->
                <module name="JavadocVariable"/>

                <!-- 命名 -->
                <!-- 抽象类 -->
	        <module name="AbstractClassName">
			<property name="format" value="^Abstract.*$|^.*Factory$"/>
		</module>
                <!-- 常量(static , final 字段) -->
	        <module name="ConstantName">
			<property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
		</module>
                <!-- 局部的final变量,包括catch中的参数 -->
	        <module name="LocalFinalVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
                <!-- 局部的非final型的变量,包括catch中的参数 -->
	        <module name="LocalVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
                <!-- 非static型变量 -->
	        <module name="MemberName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
                <!-- 方法名 -->
	        <module name="MethodName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
                <!-- 包名 -->
	        <module name="PackageName">
			<property name="format" value="^[a-z]+(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
		</module>
                <!-- 方法中的参数名 -->
	        <module name="ParameterName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
                <!-- 仅仅是static型的变量(不包括static final型) -->
	        <module name="StaticVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
		</module>
                <!-- 类型(Class或Interface)名 -->
	        <module name="TypeName">
			<property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
		</module>

                <!-- 文件头 -->
                <module name="Header">
                        <!-- 忽略检查头文件信息的第2-6行-->
			<property name="ignoreLines" value="2, 6"/>
                        <!-- 使用外部文件java_header_file.txt对头文件进行严格检查 -->
                        <property name="headerFile" value="java_header_file.txt"/>
                </module>

                <!-- Imports -->
                <!-- 避免import中含有星号-->
                <module name="AvoidStarImport">
                      <!-- 可以被忽略的import  
                      <property name="excludes" value="a.b.c,c.d"/>
                      -->
                </module>
             
                <!-- 没用的import: 没有被用到的，重复的， -->
		<module name="UnusedImports"/>

                <!-- 长度限制 -->
                <!-- 文件长度 -->
		<module name="FileLength">
                        <!-- 文件行数不超过1500行 -->
			<property name="max" value="1500"/>
		</module>

		<!-- 行长度 -->
		<module name="LineLength">
                        <!-- 一行长度不超过120个字母 -->
			<property name="max" value="120"/>
		</module>

                <!-- 方法长度 -->
                <module name="MethodLength">
                        <!-- 检查方法是一般方法还是构造方法， METHOD_DEF, CTOR_DEF-->
			<property name="tokens" value="METHOD_DEF,CTOR_DEF"/>
			<!-- 方法中的行数不超过30行-->		
          		<property name="max" value="30"/>
                        <!-- 是否对空白或"//"注释行记数,默认是"true" -->
			<property name="countEmpty" value="true"/>
		</module>

		<!-- 方法的参数个数-->
		<module name="ParameterNumber">
			<!-- 方法的参数个数 -->
			<property name="max" value="5"/>
			<property name="tokens" value="METHOD_DEF"/>
	 	</module>

		<!-- 空格检查 -->
		<!-- 方法名与左边括号之间空格 -->
		<module name="MethodParamPad"/>

		<!-- 圆括号附近的空格 -->
		<module name="ParenPad"/>

		<!-- 类型转换中圆括号附近的空格  -->
		<module name="TypecastParenPad"/>

 		<!-- 对TAB的检查 -->
		<module name="TabCharacter">

		<!-- 特定符号后的空格: COMMA-, SEMI-; TYPECAST-（） -->
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA, SEMI, TYPECAST"/>
		</module>

		<!-- 关键字 -->
		<!-- 关键字出现顺序  public static final XXX -->
		<module name="ModifierOrder"/>

	    	<!-- 多余的关键字 -->
		<module name="">
			<property name="tokens" value="METHOD_DEF,VARIABLE_DEF, ANNOTATION_FIFLE_DEF"/>
		</module>

		<!-- 对区域（empty block）的检查-->
		<!-- 空白区域：只要是{}包含起来的区域 -->
		<module name="EmptyBlock"/>

		<!-- 对左侧括号{的检查-->

		<!-- 需要括号的区域 -->
		<module name="NeedBraces">
			<property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_IF, LITERAL_FOR, LITERAL_WHILE"/>
		</module>

		<!-- 对右括号}的检查 -->
		<module name="AvoidNestedBlocks">
			<property name="allowInSwitchCase" value="true"/>
		</module>

		<!-- 编码的检查 -->
		<!-- 数组尾巴的逗号 -->
		<module name="ArrayTrailingComma"/>
	
		<!-- 避免内联条件判断: 三目运算-->
		<module name="AvoidInlineConditionals"/>

		<!-- override的equals方法 -->
		<module name="CovariantEquals"/>

		<!-- 空语句 -->		
		<module name="EmptyStatement"/>

		<!-- 检查一个类是否override了equals和hashCode方法 -->
		<module name="EqualsHashCode"/>

		
		<!-- 应该声明成final的局部变量 -->
		<module name="FinalLocalVariable"/>

		<!-- 不合适的初始化： 规定不能通过new来构造java.lang.Boolean对象 -->
		<module name="IllegalInstantiation">
			<property name="classes" value="java.lang.Boolean"/>
		</module>

		<!-- 不合适的token： 检查java中不使用switch, c++/c- -->
		<module name="IllegalToken"/>

		<!-- 内部赋值语句 例如：Integer.toString(i = 2)-->
		<module name="InnerAssignment"/>

		<!-- 魔法数： 没有含义的常量赋值 -->
		<module name="MagicNumber">
			<property name="tokens" value="NUMBER_DOUBLE, NUM_FLOAT, NUM_INT, NUM_LONG"/>
			<!-- 忽略的数字-->
			<property name="ignoreNumber" value="0, 0.05"/>		
		</module>

		<!-- 丢了default分支的switch -->
		<module name="MissingSwitchDefault"/>

		<!-- 被更改的循环控制变量 -->
		<module name="ModifiedControlVariable"/>

		<!-- 多余的throw -->
		<module name="RedundantThrows"/>

		<!-- 如果允许unchecked exception -->
		<module name="RedundantThrows">
		 	<property name="allowUnchecked" value="true"/>
		</module>
		
		<!-- 未被简化的条件表达式 -->
		<module name="SimplifyBooleanReturn"/>

		<!-- 字符串的比较 -->
		<module name="StringLiteralEquality"/>

		<!-- 嵌套的if层次 -->
		<module name="NestedIfDepth">
			<property name="max" value="3"/>
		</module>

		<!-- 嵌套的try层次 -->
		<module name="NestedTryDepth">
			<property name="max" value="3"/>
		</module>

		<!-- 调用父类的clone -->
		<module name="superClone"/>

		<!-- 父类的finalize -->
		<module name="superFinalize"/>

		<!-- 不合理的catch -->
		<module name="IllegalCatch"/>

		<!-- 不合理的throws -->
		<module name="IllegalThrows"/>

		<!-- package声明 -->
		<module name="PackageDeclaration"/>

		<!-- JUnitTestCase -->
		<module name="JUnitTestCase"/>

		<!-- return语句的数量 -->
		<module name="ReturnCount">
			<property name="max" value="3"/>
			<property name="format" value="^$"/>
		</module>

		<!-- 声明的顺序: class, 变量，构造函数，方法-->
		<module name="DeclarationOrder"/>
		
		<!-- 参数被赋值 -->
		<module name="ParameterAssignment"/>	

		<!-- 详尽的变量初始化 -->
		<module name="ExplicitInitializtion"/>

		<!-- switch语句default位置排在最后 -->
		<module name="DefaultComesLast"/>

		<!-- 丢失构造函数-->
		<module name="MissingCtor"/>

		<!-- switch中错误分支：检查某个case中是否有break,return, throw或continue -->		
		<module name="FallThrough"/>

		<!-- 多个内容相同的字符串变量 -->
		<module name="MultipleStringLiterals">
			<!-- 最多重复两次检查-->
			<property name="allowedDuplicates" value="2"/>
			<!-- 忽略逗号和空格的检查-->
			<property name="ignoreStringsRegexp" value='^(("")|(", "))$'/>
		</module>

		<!-- 同一行禁止声明多个变量 -->
		<module name="MultipleVariableDeclarations"/>

		<!-- 不使用this -->
		<module name="RequireThis">
			<!-- 只检查变量，不检查方法-->
			<property name="checkMethods" value="false"/>
			<property name="checkFields" value="false"/>
		</module>

		<!-- 不必要的圆括号 -->
		<module name="UnnecessaryParentheses"/>

		<!-- Class 设计 P42-->
	
        </module>


</module>
